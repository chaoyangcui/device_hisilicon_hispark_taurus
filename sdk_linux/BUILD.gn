# Copyright (C) 2021 Hisilicon (Shanghai) Technologies Co., Ltd. All rights reserved.

if(defined(ohos_lite)) {
  import("//build/lite/config/component/lite_component.gni")
} else {
  import("//build/ohos.gni")
}

SDK_LINUX_PATH = "//device/hisilicon/hispark_taurus/sdk_linux"
SDK_LINUX_LIB_LITE_PATH = "$SDK_LINUX_PATH/soc/lib_lite"

print("hispark_taurus_sdk in")
group("hispark_taurus_sdk") {
  if (defined(ohos_lite)) {
      deps = [
        "//kernel/linux/patches:linux_kernel",
        ":sdk_linux_lite_libs"
      ]
  } else {
      deps = [
        ":sdk_make"
      ]
  }
}

if (defined(ohos_lite)) {
  build_ext_component("sdk_make") {
    exec_path = rebase_path(".", root_build_dir)
    outdir = rebase_path("$root_out_dir")
    clang_dir = ""
    if (ohos_build_compiler_dir != "") {
        clang_dir = rebase_path("$ohos_build_compiler_dir")
    }
    command = "./build.sh ${ohos_root_path} ${outdir} y ${clang_dir}"
    deps = ["//kernel/linux/patches:linux_kernel"]
  }
} else {
  action("sdk_make") {
    outdir = rebase_path("$root_out_dir")
    script = "build.sh"
    sources = ["$outdir"]
    outputs = ["${target_out_dir}/mpp_build.log"]
  }
}

sdk_libs_name_set = [
    "libVoiceEngine.so",
    "lib_hiacs.so",
    "lib_hiae.so",
    "lib_hiawb.so",
    "lib_hiawb_natura.so",
    "lib_hicalcflicker.so",
    "lib_hidehaze.so",
    "lib_hidrc.so",
    "lib_hiir_auto.so",
    "lib_hildci.so",
    "libaaccomm.so",
    "libaacdec.so",
    "libaacenc.so",
    "libaacsbrdec.so",
    "libaacsbrenc.so",
    "libdnvqe.so",
    "libhdmi.so",
    "libhi3516cv500_acodec.so",
    "libhi3516cv500_adec.so",
    "libhi3516cv500_aenc.so",
    "libhi3516cv500_ai.so",
    "libhi3516cv500_aio.so",
    "libhi3516cv500_ao.so",
    "libhi3516cv500_base.so",
    "libhi3516cv500_chnl.so",
    "libhi3516cv500_dis.so",
    "libhi3516cv500_gdc.so",
    "libhi3516cv500_h264e.so",
    "libhi3516cv500_h265e.so",
    "libhi3516cv500_isp.so",
    "libhi3516cv500_ive.so",
    "libhi3516cv500_jpegd.so",
    "libhi3516cv500_jpege.so",
    "libhi3516cv500_nnie.so",
    "libhi3516cv500_rc.so",
    "libhi3516cv500_rgn.so",
    "libhi3516cv500_sys.so",
    "libhi3516cv500_vdec.so",
    "libhi3516cv500_vedu.so",
    "libhi3516cv500_venc.so",
    "libhi3516cv500_vfmw.so",
    "libhi3516cv500_vgs.so",
    "libhi3516cv500_vi.so",
    "libhi3516cv500_vo.so",
    "libhi3516cv500_vpss.so",
    "libhi_irq.so",
    "libhi_osal.so",
    "libhi_sensor_i2c.so",
    "libhifisheyecalibrate.so",
    "libhive_AEC.so",
    "libhive_AGC.so",
    "libhive_ANR.so",
    "libhive_EQ.so",
    "libhive_HPF.so",
    "libhive_RES.so",
    "libhive_RES_ext.so",
    "libhive_common.so",
    "libhive_record.so",
    "libhive_talkv2.so",
    "libhive_wnr.so",
    "libisp.so",
    "libive.so",
    "libmd.so",
    "libmpi.so",
    "libnnie.so",
    "libsdk.so",
    "libsecurec.so",
    "libsns_imx335.so",
    "libtde.so",
    "libupvqe.so",
]

if(defined(ohos_lite)) {
  lib_lite_abspath = rebase_path("$SDK_LINUX_LIB_LITE_PATH", ".")
  sdk_linux_libs_targets = []

  foreach(lib, sdk_libs_name_set) {
    copy("$lib") {
      sources = [ "$lib_lite_abspath/$lib" ]
      outputs = [ "$root_out_dir/$lib" ]
    }
    sdk_linux_libs_targets += [":$lib"]
  }

  group("sdk_linux_lite_libs"){
    deps=sdk_linux_libs_targets
  }
}
